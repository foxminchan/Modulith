// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modulith.Modules.Products.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Modulith.Modules.Products.Data.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    [Migration("20240420081158_Initialize-Product-Database")]
    partial class InitializeProductDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Modulith.Modules.Products.Domain.CategoryAggregate.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 4, 20, 8, 11, 58, 594, DateTimeKind.Utc).AddTicks(2790))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 4, 20, 8, 11, 58, 595, DateTimeKind.Utc).AddTicks(5264))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("e5689c21-faf7-4701-b10f-42160ad12f2e"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d618f667-521c-435c-a79f-64ba6ecd4375"),
                            CreatedDate = new DateTime(2024, 4, 20, 8, 11, 58, 609, DateTimeKind.Utc).AddTicks(21),
                            Description = "Books featuring magical or supernatural elements often set in imaginary worlds.",
                            Name = "Fantasy",
                            Version = new Guid("542b5405-2f6b-486a-b49d-fde75a1c44bb")
                        },
                        new
                        {
                            Id = new Guid("5258d841-b9c5-417b-a7f1-cded6f945b5e"),
                            CreatedDate = new DateTime(2024, 4, 20, 8, 11, 58, 609, DateTimeKind.Utc).AddTicks(1122),
                            Description = "Books exploring speculative concepts such as advanced science and technology, space exploration, or futuristic societies.",
                            Name = "Science Fiction",
                            Version = new Guid("9cfd0048-88e0-4164-9fc8-6204d706696c")
                        },
                        new
                        {
                            Id = new Guid("3fdd7457-0f21-4f1b-b2d2-d35ff7d564fc"),
                            CreatedDate = new DateTime(2024, 4, 20, 8, 11, 58, 609, DateTimeKind.Utc).AddTicks(1183),
                            Description = "Books centered around solving a crime or unraveling a puzzle, often featuring detectives or amateur sleuths.",
                            Name = "Mystery",
                            Version = new Guid("f86177a3-29b8-4e49-a05f-d9359d92c8ee")
                        },
                        new
                        {
                            Id = new Guid("a186dbbe-143b-4a90-8bfa-5846f4d42f9f"),
                            CreatedDate = new DateTime(2024, 4, 20, 8, 11, 58, 609, DateTimeKind.Utc).AddTicks(1202),
                            Description = "Books focusing on romantic relationships and emotional connections between characters.",
                            Name = "Romance",
                            Version = new Guid("c2cf880a-8ae5-4344-9b12-571638060eb6")
                        },
                        new
                        {
                            Id = new Guid("9dfbd2c6-cfa4-4f07-8645-47640e0275fc"),
                            CreatedDate = new DateTime(2024, 4, 20, 8, 11, 58, 609, DateTimeKind.Utc).AddTicks(1205),
                            Description = "Books set in the past, often blending fictional characters and events with real historical contexts.",
                            Name = "Historical Fiction",
                            Version = new Guid("97389970-b5a0-4ced-8bad-cee883cee6cc")
                        },
                        new
                        {
                            Id = new Guid("7957dd55-75c2-4b78-975f-bfa57413ae49"),
                            CreatedDate = new DateTime(2024, 4, 20, 8, 11, 58, 609, DateTimeKind.Utc).AddTicks(1210),
                            Description = "Books designed to provoke excitement, tension, and suspense, often involving danger and high stakes.",
                            Name = "Thriller",
                            Version = new Guid("d69b0e39-5bb9-4dbf-8de7-ec4fa4c460d3")
                        },
                        new
                        {
                            Id = new Guid("df7bda46-8dcd-4986-82c1-5598d19e40a7"),
                            CreatedDate = new DateTime(2024, 4, 20, 8, 11, 58, 609, DateTimeKind.Utc).AddTicks(1213),
                            Description = "Books intended to evoke fear, dread, or terror through supernatural or psychological elements.",
                            Name = "Horror",
                            Version = new Guid("256924bd-2652-4172-9f5a-498f723c011f")
                        },
                        new
                        {
                            Id = new Guid("3aa05c8a-ad4c-4fe6-8447-ce8bb5375831"),
                            CreatedDate = new DateTime(2024, 4, 20, 8, 11, 58, 609, DateTimeKind.Utc).AddTicks(1216),
                            Description = "Books recounting the life and experiences of a real person, often written by another individual.",
                            Name = "Biography",
                            Version = new Guid("f0cbda11-100f-4c29-b704-3eaa96f1fede")
                        },
                        new
                        {
                            Id = new Guid("a73286d3-526a-43b0-a2c0-3bb0d687650d"),
                            CreatedDate = new DateTime(2024, 4, 20, 8, 11, 58, 609, DateTimeKind.Utc).AddTicks(1218),
                            Description = "Books offering advice, guidance, and strategies for personal growth, improvement, and self-discovery.",
                            Name = "Self-Help",
                            Version = new Guid("605dcfd3-18ee-4a1b-b308-c6fa7e724beb")
                        },
                        new
                        {
                            Id = new Guid("86e259d9-5a7d-4475-8e5b-f3a9755e53e6"),
                            CreatedDate = new DateTime(2024, 4, 20, 8, 11, 58, 609, DateTimeKind.Utc).AddTicks(1221),
                            Description = "Books providing recipes, cooking techniques, and culinary inspiration for preparing various dishes and cuisines.",
                            Name = "Cooking",
                            Version = new Guid("1756d7e9-b926-4e5c-8702-f66bc2f2746b")
                        });
                });

            modelBuilder.Entity("Modulith.Modules.Products.Domain.ProductAggregate.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 4, 20, 8, 11, 58, 610, DateTimeKind.Utc).AddTicks(1460))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("product_code");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("quantity");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 4, 20, 8, 11, 58, 610, DateTimeKind.Utc).AddTicks(2074))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("2e457bbe-d46f-4318-b6d4-63dc52786d31"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Modulith.Modules.Products.Domain.ProductAggregate.Product", b =>
                {
                    b.HasOne("Modulith.Modules.Products.Domain.CategoryAggregate.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_products_categories_category_id");

                    b.OwnsOne("Modulith.Modules.Products.Domain.ProductAggregate.ValueObjects.ProductImage", "Image", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Alt")
                                .HasColumnType("text");

                            b1.Property<string>("ImageUrl")
                                .HasColumnType("text");

                            b1.Property<string>("Title")
                                .HasColumnType("text");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.ToJson("image");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("Modulith.Modules.Products.Domain.ProductAggregate.ValueObjects.ProductPrice", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("PriceSale")
                                .HasColumnType("numeric");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.ToJson("price");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("Modulith.Modules.Products.Domain.CategoryAggregate.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
