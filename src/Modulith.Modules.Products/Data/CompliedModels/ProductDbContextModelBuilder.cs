// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Modulith.Modules.Products.Data.CompliedModels
{
    public partial class ProductDbContextModel
    {
        partial void Initialize()
        {
            var category = CategoryEntityType.Create(this);
            var product = ProductEntityType.Create(this);
            var productImage = ProductImageEntityType.Create(this);
            var productPrice = ProductPriceEntityType.Create(this);

            ProductEntityType.CreateForeignKey1(product, category);
            ProductImageEntityType.CreateForeignKey1(productImage, product);
            ProductPriceEntityType.CreateForeignKey1(productPrice, product);

            CategoryEntityType.CreateAnnotations(category);
            ProductEntityType.CreateAnnotations(product);
            ProductImageEntityType.CreateAnnotations(productImage);
            ProductPriceEntityType.CreateAnnotations(productPrice);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.4");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var category = FindEntityType("Modulith.Modules.Products.Domain.CategoryAggregate.Category")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            category.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var modulithModulesProductsDomainCategoryAggregateCategoryTableBase = new TableBase("Modulith.Modules.Products.Domain.CategoryAggregate.Category", null, relationalModel);
            var created_dateColumnBase = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", modulithModulesProductsDomainCategoryAggregateCategoryTableBase);
            modulithModulesProductsDomainCategoryAggregateCategoryTableBase.Columns.Add("created_date", created_dateColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("description", "character varying(500)", modulithModulesProductsDomainCategoryAggregateCategoryTableBase)
            {
                IsNullable = true
            };
            modulithModulesProductsDomainCategoryAggregateCategoryTableBase.Columns.Add("description", descriptionColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "uuid", modulithModulesProductsDomainCategoryAggregateCategoryTableBase);
            modulithModulesProductsDomainCategoryAggregateCategoryTableBase.Columns.Add("id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("name", "character varying(100)", modulithModulesProductsDomainCategoryAggregateCategoryTableBase);
            modulithModulesProductsDomainCategoryAggregateCategoryTableBase.Columns.Add("name", nameColumnBase);
            var update_dateColumnBase = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", modulithModulesProductsDomainCategoryAggregateCategoryTableBase)
            {
                IsNullable = true
            };
            modulithModulesProductsDomainCategoryAggregateCategoryTableBase.Columns.Add("update_date", update_dateColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("version", "uuid", modulithModulesProductsDomainCategoryAggregateCategoryTableBase);
            modulithModulesProductsDomainCategoryAggregateCategoryTableBase.Columns.Add("version", versionColumnBase);
            relationalModel.DefaultTables.Add("Modulith.Modules.Products.Domain.CategoryAggregate.Category", modulithModulesProductsDomainCategoryAggregateCategoryTableBase);
            var modulithModulesProductsDomainCategoryAggregateCategoryMappingBase = new TableMappingBase<ColumnMappingBase>(category, modulithModulesProductsDomainCategoryAggregateCategoryTableBase, true);
            modulithModulesProductsDomainCategoryAggregateCategoryTableBase.AddTypeMapping(modulithModulesProductsDomainCategoryAggregateCategoryMappingBase, false);
            defaultTableMappings.Add(modulithModulesProductsDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, category.FindProperty("Id")!, modulithModulesProductsDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase, category.FindProperty("CreatedDate")!, modulithModulesProductsDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, category.FindProperty("Description")!, modulithModulesProductsDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, category.FindProperty("Name")!, modulithModulesProductsDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase, category.FindProperty("UpdateDate")!, modulithModulesProductsDomainCategoryAggregateCategoryMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, category.FindProperty("Version")!, modulithModulesProductsDomainCategoryAggregateCategoryMappingBase);

            var tableMappings = new List<TableMapping>();
            category.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var categoriesTable = new Table("categories", null, relationalModel);
            var idColumn = new Column("id", "uuid", categoriesTable);
            categoriesTable.Columns.Add("id", idColumn);
            var created_dateColumn = new Column("created_date", "timestamp with time zone", categoriesTable);
            categoriesTable.Columns.Add("created_date", created_dateColumn);
            var descriptionColumn = new Column("description", "character varying(500)", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("description", descriptionColumn);
            var nameColumn = new Column("name", "character varying(100)", categoriesTable);
            categoriesTable.Columns.Add("name", nameColumn);
            var update_dateColumn = new Column("update_date", "timestamp with time zone", categoriesTable)
            {
                IsNullable = true
            };
            categoriesTable.Columns.Add("update_date", update_dateColumn);
            var versionColumn = new Column("version", "uuid", categoriesTable);
            categoriesTable.Columns.Add("version", versionColumn);
            var pk_categories = new UniqueConstraint("pk_categories", categoriesTable, new[] { idColumn });
            categoriesTable.PrimaryKey = pk_categories;
            var pk_categoriesUc = RelationalModel.GetKey(this,
                "Modulith.Modules.Products.Domain.CategoryAggregate.Category",
                new[] { "Id" });
            pk_categories.MappedKeys.Add(pk_categoriesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_categoriesUc).Add(pk_categories);
            categoriesTable.UniqueConstraints.Add("pk_categories", pk_categories);
            relationalModel.Tables.Add(("categories", null), categoriesTable);
            var categoriesTableMapping = new TableMapping(category, categoriesTable, true);
            categoriesTable.AddTypeMapping(categoriesTableMapping, false);
            tableMappings.Add(categoriesTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, category.FindProperty("Id")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn, category.FindProperty("CreatedDate")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, category.FindProperty("Description")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, category.FindProperty("Name")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn, category.FindProperty("UpdateDate")!, categoriesTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, category.FindProperty("Version")!, categoriesTableMapping);

            var product = FindEntityType("Modulith.Modules.Products.Domain.ProductAggregate.Product")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            product.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var modulithModulesProductsDomainProductAggregateProductTableBase = new TableBase("Modulith.Modules.Products.Domain.ProductAggregate.Product", null, relationalModel);
            var category_idColumnBase = new ColumnBase<ColumnMappingBase>("category_id", "uuid", modulithModulesProductsDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            modulithModulesProductsDomainProductAggregateProductTableBase.Columns.Add("category_id", category_idColumnBase);
            var created_dateColumnBase0 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", modulithModulesProductsDomainProductAggregateProductTableBase);
            modulithModulesProductsDomainProductAggregateProductTableBase.Columns.Add("created_date", created_dateColumnBase0);
            var descriptionColumnBase0 = new ColumnBase<ColumnMappingBase>("description", "character varying(1000)", modulithModulesProductsDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            modulithModulesProductsDomainProductAggregateProductTableBase.Columns.Add("description", descriptionColumnBase0);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("id", "uuid", modulithModulesProductsDomainProductAggregateProductTableBase);
            modulithModulesProductsDomainProductAggregateProductTableBase.Columns.Add("id", idColumnBase0);
            var is_deletedColumnBase = new ColumnBase<ColumnMappingBase>("is_deleted", "boolean", modulithModulesProductsDomainProductAggregateProductTableBase);
            modulithModulesProductsDomainProductAggregateProductTableBase.Columns.Add("is_deleted", is_deletedColumnBase);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("name", "character varying(100)", modulithModulesProductsDomainProductAggregateProductTableBase);
            modulithModulesProductsDomainProductAggregateProductTableBase.Columns.Add("name", nameColumnBase0);
            var product_codeColumnBase = new ColumnBase<ColumnMappingBase>("product_code", "character varying(16)", modulithModulesProductsDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            modulithModulesProductsDomainProductAggregateProductTableBase.Columns.Add("product_code", product_codeColumnBase);
            var quantityColumnBase = new ColumnBase<ColumnMappingBase>("quantity", "integer", modulithModulesProductsDomainProductAggregateProductTableBase);
            modulithModulesProductsDomainProductAggregateProductTableBase.Columns.Add("quantity", quantityColumnBase);
            var statusColumnBase = new ColumnBase<ColumnMappingBase>("status", "integer", modulithModulesProductsDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            modulithModulesProductsDomainProductAggregateProductTableBase.Columns.Add("status", statusColumnBase);
            var update_dateColumnBase0 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", modulithModulesProductsDomainProductAggregateProductTableBase)
            {
                IsNullable = true
            };
            modulithModulesProductsDomainProductAggregateProductTableBase.Columns.Add("update_date", update_dateColumnBase0);
            var versionColumnBase0 = new ColumnBase<ColumnMappingBase>("version", "uuid", modulithModulesProductsDomainProductAggregateProductTableBase);
            modulithModulesProductsDomainProductAggregateProductTableBase.Columns.Add("version", versionColumnBase0);
            relationalModel.DefaultTables.Add("Modulith.Modules.Products.Domain.ProductAggregate.Product", modulithModulesProductsDomainProductAggregateProductTableBase);
            var modulithModulesProductsDomainProductAggregateProductMappingBase = new TableMappingBase<ColumnMappingBase>(product, modulithModulesProductsDomainProductAggregateProductTableBase, true);
            modulithModulesProductsDomainProductAggregateProductTableBase.AddTypeMapping(modulithModulesProductsDomainProductAggregateProductMappingBase, false);
            defaultTableMappings0.Add(modulithModulesProductsDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, product.FindProperty("Id")!, modulithModulesProductsDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)category_idColumnBase, product.FindProperty("CategoryId")!, modulithModulesProductsDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase0, product.FindProperty("CreatedDate")!, modulithModulesProductsDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase0, product.FindProperty("Description")!, modulithModulesProductsDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)is_deletedColumnBase, product.FindProperty("IsDeleted")!, modulithModulesProductsDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, product.FindProperty("Name")!, modulithModulesProductsDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_codeColumnBase, product.FindProperty("ProductCode")!, modulithModulesProductsDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quantityColumnBase, product.FindProperty("Quantity")!, modulithModulesProductsDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)statusColumnBase, product.FindProperty("Status")!, modulithModulesProductsDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase0, product.FindProperty("UpdateDate")!, modulithModulesProductsDomainProductAggregateProductMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase0, product.FindProperty("Version")!, modulithModulesProductsDomainProductAggregateProductMappingBase);

            var tableMappings0 = new List<TableMapping>();
            product.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var productsTable = new Table("products", null, relationalModel);
            var idColumn0 = new Column("id", "uuid", productsTable);
            productsTable.Columns.Add("id", idColumn0);
            var category_idColumn = new Column("category_id", "uuid", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("category_id", category_idColumn);
            var created_dateColumn0 = new Column("created_date", "timestamp with time zone", productsTable);
            productsTable.Columns.Add("created_date", created_dateColumn0);
            var descriptionColumn0 = new Column("description", "character varying(1000)", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("description", descriptionColumn0);
            var imageColumn = new JsonColumn("image", "jsonb", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("image", imageColumn);
            var is_deletedColumn = new Column("is_deleted", "boolean", productsTable);
            productsTable.Columns.Add("is_deleted", is_deletedColumn);
            var nameColumn0 = new Column("name", "character varying(100)", productsTable);
            productsTable.Columns.Add("name", nameColumn0);
            var priceColumn = new JsonColumn("price", "jsonb", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("price", priceColumn);
            var product_codeColumn = new Column("product_code", "character varying(16)", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("product_code", product_codeColumn);
            var quantityColumn = new Column("quantity", "integer", productsTable);
            productsTable.Columns.Add("quantity", quantityColumn);
            var statusColumn = new Column("status", "integer", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("status", statusColumn);
            var update_dateColumn0 = new Column("update_date", "timestamp with time zone", productsTable)
            {
                IsNullable = true
            };
            productsTable.Columns.Add("update_date", update_dateColumn0);
            var versionColumn0 = new Column("version", "uuid", productsTable);
            productsTable.Columns.Add("version", versionColumn0);
            var pk_products = new UniqueConstraint("pk_products", productsTable, new[] { idColumn0 });
            productsTable.PrimaryKey = pk_products;
            var pk_productsUc = RelationalModel.GetKey(this,
                "Modulith.Modules.Products.Domain.ProductAggregate.Product",
                new[] { "Id" });
            pk_products.MappedKeys.Add(pk_productsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_productsUc).Add(pk_products);
            productsTable.UniqueConstraints.Add("pk_products", pk_products);
            var ix_products_category_id = new TableIndex(
            "ix_products_category_id", productsTable, new[] { category_idColumn }, false);
            var ix_products_category_idIx = RelationalModel.GetIndex(this,
                "Modulith.Modules.Products.Domain.ProductAggregate.Product",
                new[] { "CategoryId" });
            ix_products_category_id.MappedIndexes.Add(ix_products_category_idIx);
            RelationalModel.GetOrCreateTableIndexes(ix_products_category_idIx).Add(ix_products_category_id);
            productsTable.Indexes.Add("ix_products_category_id", ix_products_category_id);
            relationalModel.Tables.Add(("products", null), productsTable);
            var productsTableMapping = new TableMapping(product, productsTable, true)
            {
                IsSharedTablePrincipal = true,
            };
            productsTable.AddTypeMapping(productsTableMapping, false);
            tableMappings0.Add(productsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, product.FindProperty("Id")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(category_idColumn, product.FindProperty("CategoryId")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn0, product.FindProperty("CreatedDate")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn0, product.FindProperty("Description")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(is_deletedColumn, product.FindProperty("IsDeleted")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, product.FindProperty("Name")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(product_codeColumn, product.FindProperty("ProductCode")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(quantityColumn, product.FindProperty("Quantity")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(statusColumn, product.FindProperty("Status")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn0, product.FindProperty("UpdateDate")!, productsTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn0, product.FindProperty("Version")!, productsTableMapping);

            var productImage = FindEntityType("Modulith.Modules.Products.Domain.ProductAggregate.ValueObjects.ProductImage")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            productImage.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var modulithModulesProductsDomainProductAggregateValueObjectsProductImageTableBase = new TableBase("Modulith.Modules.Products.Domain.ProductAggregate.ValueObjects.ProductImage", null, relationalModel);
            var imageColumnBase = new JsonColumnBase("image", "jsonb", modulithModulesProductsDomainProductAggregateValueObjectsProductImageTableBase)
            {
                IsNullable = true
            };
            modulithModulesProductsDomainProductAggregateValueObjectsProductImageTableBase.Columns.Add("image", imageColumnBase);
            relationalModel.DefaultTables.Add("Modulith.Modules.Products.Domain.ProductAggregate.ValueObjects.ProductImage", modulithModulesProductsDomainProductAggregateValueObjectsProductImageTableBase);
            var modulithModulesProductsDomainProductAggregateValueObjectsProductImageMappingBase = new TableMappingBase<ColumnMappingBase>(productImage, modulithModulesProductsDomainProductAggregateValueObjectsProductImageTableBase, true);
            modulithModulesProductsDomainProductAggregateValueObjectsProductImageTableBase.AddTypeMapping(modulithModulesProductsDomainProductAggregateValueObjectsProductImageMappingBase, false);
            defaultTableMappings1.Add(modulithModulesProductsDomainProductAggregateValueObjectsProductImageMappingBase);

            var tableMappings1 = new List<TableMapping>();
            productImage.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var productsTableMapping0 = new TableMapping(productImage, productsTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            productsTable.AddTypeMapping(productsTableMapping0, true);
            tableMappings1.Add(productsTableMapping0);
            productsTable.AddRowInternalForeignKey(productImage, RelationalModel.GetForeignKey(this,
                "Modulith.Modules.Products.Domain.ProductAggregate.ValueObjects.ProductImage",
                new[] { "ProductId" },
                "Modulith.Modules.Products.Domain.ProductAggregate.Product",
                new[] { "Id" }));

            var productPrice = FindEntityType("Modulith.Modules.Products.Domain.ProductAggregate.ValueObjects.ProductPrice")!;

            var defaultTableMappings2 = new List<TableMappingBase<ColumnMappingBase>>();
            productPrice.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings2);
            var modulithModulesProductsDomainProductAggregateValueObjectsProductPriceTableBase = new TableBase("Modulith.Modules.Products.Domain.ProductAggregate.ValueObjects.ProductPrice", null, relationalModel);
            var priceColumnBase = new JsonColumnBase("price", "jsonb", modulithModulesProductsDomainProductAggregateValueObjectsProductPriceTableBase)
            {
                IsNullable = true
            };
            modulithModulesProductsDomainProductAggregateValueObjectsProductPriceTableBase.Columns.Add("price", priceColumnBase);
            relationalModel.DefaultTables.Add("Modulith.Modules.Products.Domain.ProductAggregate.ValueObjects.ProductPrice", modulithModulesProductsDomainProductAggregateValueObjectsProductPriceTableBase);
            var modulithModulesProductsDomainProductAggregateValueObjectsProductPriceMappingBase = new TableMappingBase<ColumnMappingBase>(productPrice, modulithModulesProductsDomainProductAggregateValueObjectsProductPriceTableBase, true);
            modulithModulesProductsDomainProductAggregateValueObjectsProductPriceTableBase.AddTypeMapping(modulithModulesProductsDomainProductAggregateValueObjectsProductPriceMappingBase, false);
            defaultTableMappings2.Add(modulithModulesProductsDomainProductAggregateValueObjectsProductPriceMappingBase);

            var tableMappings2 = new List<TableMapping>();
            productPrice.SetRuntimeAnnotation("Relational:TableMappings", tableMappings2);
            var productsTableMapping1 = new TableMapping(productPrice, productsTable, true)
            {
                IsSharedTablePrincipal = false,
            };
            productsTable.AddTypeMapping(productsTableMapping1, true);
            tableMappings2.Add(productsTableMapping1);
            productsTable.AddRowInternalForeignKey(productPrice, RelationalModel.GetForeignKey(this,
                "Modulith.Modules.Products.Domain.ProductAggregate.ValueObjects.ProductPrice",
                new[] { "ProductId" },
                "Modulith.Modules.Products.Domain.ProductAggregate.Product",
                new[] { "Id" }));
            var fk_products_categories_category_id = new ForeignKeyConstraint(
                "fk_products_categories_category_id", productsTable, categoriesTable,
                new[] { category_idColumn },
                categoriesTable.FindUniqueConstraint("pk_categories")!, ReferentialAction.SetNull);
            var fk_products_categories_category_idFk = RelationalModel.GetForeignKey(this,
                "Modulith.Modules.Products.Domain.ProductAggregate.Product",
                new[] { "CategoryId" },
                "Modulith.Modules.Products.Domain.CategoryAggregate.Category",
                new[] { "Id" });
            fk_products_categories_category_id.MappedForeignKeys.Add(fk_products_categories_category_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_products_categories_category_idFk).Add(fk_products_categories_category_id);
            productsTable.ForeignKeyConstraints.Add(fk_products_categories_category_id);
            categoriesTable.ReferencingForeignKeyConstraints.Add(fk_products_categories_category_id);
            return relationalModel.MakeReadOnly();
        }
    }
}
