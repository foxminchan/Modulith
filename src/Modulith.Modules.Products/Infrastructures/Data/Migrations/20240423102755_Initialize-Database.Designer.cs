// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Modulith.Modules.Products.Infrastructures.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Modulith.Modules.Products.Infrastructures.Data.Migrations
{
    [DbContext(typeof(ProductDbContext))]
    [Migration("20240423102755_Initialize-Database")]
    partial class InitializeDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Modulith.Modules.Products.Domain.CategoryAggregate.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 4, 23, 10, 27, 55, 242, DateTimeKind.Utc).AddTicks(3065))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 4, 23, 10, 27, 55, 243, DateTimeKind.Utc).AddTicks(4913))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("03e65255-1f6a-4ea9-8132-a90122045dd5"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c4f30d3-6330-4470-b6a3-a01261b33e46"),
                            CreatedDate = new DateTime(2024, 4, 23, 10, 27, 55, 247, DateTimeKind.Utc).AddTicks(4409),
                            Description = "Books featuring magical or supernatural elements often set in imaginary worlds.",
                            Name = "Fantasy",
                            Version = new Guid("20f7f85b-f4e7-46fb-9804-ba999e510e57")
                        },
                        new
                        {
                            Id = new Guid("2a6e4b52-6a81-4b71-ad7f-01f4de15cd84"),
                            CreatedDate = new DateTime(2024, 4, 23, 10, 27, 55, 247, DateTimeKind.Utc).AddTicks(5443),
                            Description = "Books exploring speculative concepts such as advanced science and technology, space exploration, or futuristic societies.",
                            Name = "Science Fiction",
                            Version = new Guid("88c9f1b6-0a72-4cf1-b1cd-d6e05585459d")
                        },
                        new
                        {
                            Id = new Guid("33dd7bda-2b23-47cc-bbf9-fffdc286f92c"),
                            CreatedDate = new DateTime(2024, 4, 23, 10, 27, 55, 247, DateTimeKind.Utc).AddTicks(5505),
                            Description = "Books centered around solving a crime or unraveling a puzzle, often featuring detectives or amateur sleuths.",
                            Name = "Mystery",
                            Version = new Guid("553ce211-6136-4762-b96a-3deb7ba73d50")
                        },
                        new
                        {
                            Id = new Guid("806bfc07-aabc-4a37-a892-0c811f3dc09c"),
                            CreatedDate = new DateTime(2024, 4, 23, 10, 27, 55, 247, DateTimeKind.Utc).AddTicks(5508),
                            Description = "Books focusing on romantic relationships and emotional connections between characters.",
                            Name = "Romance",
                            Version = new Guid("a42b0c3f-a0d3-45cf-9804-7fb54647f086")
                        },
                        new
                        {
                            Id = new Guid("9d618fe1-8ba6-4801-8f71-3349b7966428"),
                            CreatedDate = new DateTime(2024, 4, 23, 10, 27, 55, 247, DateTimeKind.Utc).AddTicks(5515),
                            Description = "Books set in the past, often blending fictional characters and events with real historical contexts.",
                            Name = "Historical Fiction",
                            Version = new Guid("9ff398f0-1468-490e-9da9-193b69c6c6ee")
                        },
                        new
                        {
                            Id = new Guid("39bde98d-4565-4d9c-a4a6-d0e6d24ae37f"),
                            CreatedDate = new DateTime(2024, 4, 23, 10, 27, 55, 247, DateTimeKind.Utc).AddTicks(5521),
                            Description = "Books designed to provoke excitement, tension, and suspense, often involving danger and high stakes.",
                            Name = "Thriller",
                            Version = new Guid("63cd68b4-4aee-44c0-b2d9-cbc07d3b3ceb")
                        },
                        new
                        {
                            Id = new Guid("5edd6b26-67d1-45c1-9857-e2a3b7dfce82"),
                            CreatedDate = new DateTime(2024, 4, 23, 10, 27, 55, 247, DateTimeKind.Utc).AddTicks(5523),
                            Description = "Books intended to evoke fear, dread, or terror through supernatural or psychological elements.",
                            Name = "Horror",
                            Version = new Guid("b859aa05-57f9-4b11-bdfe-a66944cd25d1")
                        },
                        new
                        {
                            Id = new Guid("a3285a3f-a7c4-4edc-8ef9-26627f9ac5b0"),
                            CreatedDate = new DateTime(2024, 4, 23, 10, 27, 55, 247, DateTimeKind.Utc).AddTicks(5526),
                            Description = "Books recounting the life and experiences of a real person, often written by another individual.",
                            Name = "Biography",
                            Version = new Guid("fab13603-1716-4b2c-a66e-5937ce5a16c6")
                        },
                        new
                        {
                            Id = new Guid("05237d85-80d1-428f-a3b3-3d9630707692"),
                            CreatedDate = new DateTime(2024, 4, 23, 10, 27, 55, 247, DateTimeKind.Utc).AddTicks(5530),
                            Description = "Books offering advice, guidance, and strategies for personal growth, improvement, and self-discovery.",
                            Name = "Self-Help",
                            Version = new Guid("5ed284d7-3180-46c4-8a49-8cf6ac4c8f2d")
                        },
                        new
                        {
                            Id = new Guid("54ad2e44-2239-4782-819c-e78495029250"),
                            CreatedDate = new DateTime(2024, 4, 23, 10, 27, 55, 247, DateTimeKind.Utc).AddTicks(5533),
                            Description = "Books providing recipes, cooking techniques, and culinary inspiration for preparing various dishes and cuisines.",
                            Name = "Cooking",
                            Version = new Guid("cbd4fa8c-51f0-40f3-8f0e-cc1de656b454")
                        });
                });

            modelBuilder.Entity("Modulith.Modules.Products.Domain.ProductAggregate.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 4, 23, 10, 27, 55, 248, DateTimeKind.Utc).AddTicks(5588))
                        .HasColumnName("created_date");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("ProductCode")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("product_code");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("quantity");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValue(new DateTime(2024, 4, 23, 10, 27, 55, 248, DateTimeKind.Utc).AddTicks(6359))
                        .HasColumnName("update_date");

                    b.Property<Guid>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValue(new Guid("f1d33def-5831-4d10-8471-2af0d1129a44"))
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_products_category_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Modulith.Modules.Products.Domain.ProductAggregate.Product", b =>
                {
                    b.HasOne("Modulith.Modules.Products.Domain.CategoryAggregate.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_products_categories_category_id");

                    b.OwnsOne("Modulith.Modules.Products.Domain.ProductAggregate.ValueObjects.ProductImage", "Image", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Alt")
                                .HasColumnType("text");

                            b1.Property<string>("ImageUrl")
                                .HasColumnType("text");

                            b1.Property<string>("Title")
                                .HasColumnType("text");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.ToJson("image");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.OwnsOne("Modulith.Modules.Products.Domain.ProductAggregate.ValueObjects.ProductPrice", "Price", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Price")
                                .HasColumnType("numeric");

                            b1.Property<decimal>("PriceSale")
                                .HasColumnType("numeric");

                            b1.HasKey("ProductId");

                            b1.ToTable("products");

                            b1.ToJson("price");

                            b1.WithOwner()
                                .HasForeignKey("ProductId")
                                .HasConstraintName("fk_products_products_id");
                        });

                    b.Navigation("Category");

                    b.Navigation("Image");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("Modulith.Modules.Products.Domain.CategoryAggregate.Category", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
