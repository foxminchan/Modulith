// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Modulith.Modules.Orders.Infrastructures.Data.CompiledModels
{
    public partial class OrderDbContextModel
    {
        partial void Initialize()
        {
            var order = OrderEntityType.Create(this);
            var orderItem = OrderItemEntityType.Create(this);

            OrderItemEntityType.CreateForeignKey1(orderItem, order);

            OrderEntityType.CreateAnnotations(order);
            OrderItemEntityType.CreateAnnotations(orderItem);

            AddAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);
            AddAnnotation("ProductVersion", "8.0.4");
            AddAnnotation("Relational:MaxIdentifierLength", 63);
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var order = FindEntityType("Modulith.Modules.Orders.Domain.Order")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            order.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var modulithModulesOrdersDomainOrderTableBase = new TableBase("Modulith.Modules.Orders.Domain.Order", null, relationalModel);
            var codeColumnBase = new ColumnBase<ColumnMappingBase>("code", "character varying(16)", modulithModulesOrdersDomainOrderTableBase)
            {
                IsNullable = true
            };
            modulithModulesOrdersDomainOrderTableBase.Columns.Add("code", codeColumnBase);
            var created_dateColumnBase = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", modulithModulesOrdersDomainOrderTableBase);
            modulithModulesOrdersDomainOrderTableBase.Columns.Add("created_date", created_dateColumnBase);
            var customer_idColumnBase = new ColumnBase<ColumnMappingBase>("customer_id", "uuid", modulithModulesOrdersDomainOrderTableBase)
            {
                IsNullable = true
            };
            modulithModulesOrdersDomainOrderTableBase.Columns.Add("customer_id", customer_idColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("id", "uuid", modulithModulesOrdersDomainOrderTableBase);
            modulithModulesOrdersDomainOrderTableBase.Columns.Add("id", idColumnBase);
            var update_dateColumnBase = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", modulithModulesOrdersDomainOrderTableBase)
            {
                IsNullable = true
            };
            modulithModulesOrdersDomainOrderTableBase.Columns.Add("update_date", update_dateColumnBase);
            var versionColumnBase = new ColumnBase<ColumnMappingBase>("version", "uuid", modulithModulesOrdersDomainOrderTableBase);
            modulithModulesOrdersDomainOrderTableBase.Columns.Add("version", versionColumnBase);
            relationalModel.DefaultTables.Add("Modulith.Modules.Orders.Domain.Order", modulithModulesOrdersDomainOrderTableBase);
            var modulithModulesOrdersDomainOrderMappingBase = new TableMappingBase<ColumnMappingBase>(order, modulithModulesOrdersDomainOrderTableBase, true);
            modulithModulesOrdersDomainOrderTableBase.AddTypeMapping(modulithModulesOrdersDomainOrderMappingBase, false);
            defaultTableMappings.Add(modulithModulesOrdersDomainOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, order.FindProperty("Id")!, modulithModulesOrdersDomainOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)codeColumnBase, order.FindProperty("Code")!, modulithModulesOrdersDomainOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase, order.FindProperty("CreatedDate")!, modulithModulesOrdersDomainOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)customer_idColumnBase, order.FindProperty("CustomerId")!, modulithModulesOrdersDomainOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase, order.FindProperty("UpdateDate")!, modulithModulesOrdersDomainOrderMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase, order.FindProperty("Version")!, modulithModulesOrdersDomainOrderMappingBase);

            var tableMappings = new List<TableMapping>();
            order.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var orderTable = new Table("order", null, relationalModel);
            var idColumn = new Column("id", "uuid", orderTable);
            orderTable.Columns.Add("id", idColumn);
            var codeColumn = new Column("code", "character varying(16)", orderTable)
            {
                IsNullable = true
            };
            orderTable.Columns.Add("code", codeColumn);
            var created_dateColumn = new Column("created_date", "timestamp with time zone", orderTable);
            orderTable.Columns.Add("created_date", created_dateColumn);
            var customer_idColumn = new Column("customer_id", "uuid", orderTable)
            {
                IsNullable = true
            };
            orderTable.Columns.Add("customer_id", customer_idColumn);
            var update_dateColumn = new Column("update_date", "timestamp with time zone", orderTable)
            {
                IsNullable = true
            };
            orderTable.Columns.Add("update_date", update_dateColumn);
            var versionColumn = new Column("version", "uuid", orderTable);
            orderTable.Columns.Add("version", versionColumn);
            var pk_order = new UniqueConstraint("pk_order", orderTable, new[] { idColumn });
            orderTable.PrimaryKey = pk_order;
            var pk_orderUc = RelationalModel.GetKey(this,
                "Modulith.Modules.Orders.Domain.Order",
                new[] { "Id" });
            pk_order.MappedKeys.Add(pk_orderUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_orderUc).Add(pk_order);
            orderTable.UniqueConstraints.Add("pk_order", pk_order);
            relationalModel.Tables.Add(("order", null), orderTable);
            var orderTableMapping = new TableMapping(order, orderTable, true);
            orderTable.AddTypeMapping(orderTableMapping, false);
            tableMappings.Add(orderTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, order.FindProperty("Id")!, orderTableMapping);
            RelationalModel.CreateColumnMapping(codeColumn, order.FindProperty("Code")!, orderTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn, order.FindProperty("CreatedDate")!, orderTableMapping);
            RelationalModel.CreateColumnMapping(customer_idColumn, order.FindProperty("CustomerId")!, orderTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn, order.FindProperty("UpdateDate")!, orderTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn, order.FindProperty("Version")!, orderTableMapping);

            var orderItem = FindEntityType("Modulith.Modules.Orders.Domain.OrderItem")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            orderItem.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var modulithModulesOrdersDomainOrderItemTableBase = new TableBase("Modulith.Modules.Orders.Domain.OrderItem", null, relationalModel);
            var created_dateColumnBase0 = new ColumnBase<ColumnMappingBase>("created_date", "timestamp with time zone", modulithModulesOrdersDomainOrderItemTableBase);
            modulithModulesOrdersDomainOrderItemTableBase.Columns.Add("created_date", created_dateColumnBase0);
            var order_idColumnBase = new ColumnBase<ColumnMappingBase>("order_id", "uuid", modulithModulesOrdersDomainOrderItemTableBase);
            modulithModulesOrdersDomainOrderItemTableBase.Columns.Add("order_id", order_idColumnBase);
            var priceColumnBase = new ColumnBase<ColumnMappingBase>("price", "numeric", modulithModulesOrdersDomainOrderItemTableBase);
            modulithModulesOrdersDomainOrderItemTableBase.Columns.Add("price", priceColumnBase);
            var product_idColumnBase = new ColumnBase<ColumnMappingBase>("product_id", "uuid", modulithModulesOrdersDomainOrderItemTableBase);
            modulithModulesOrdersDomainOrderItemTableBase.Columns.Add("product_id", product_idColumnBase);
            var quantityColumnBase = new ColumnBase<ColumnMappingBase>("quantity", "integer", modulithModulesOrdersDomainOrderItemTableBase);
            modulithModulesOrdersDomainOrderItemTableBase.Columns.Add("quantity", quantityColumnBase);
            var update_dateColumnBase0 = new ColumnBase<ColumnMappingBase>("update_date", "timestamp with time zone", modulithModulesOrdersDomainOrderItemTableBase)
            {
                IsNullable = true
            };
            modulithModulesOrdersDomainOrderItemTableBase.Columns.Add("update_date", update_dateColumnBase0);
            var versionColumnBase0 = new ColumnBase<ColumnMappingBase>("version", "uuid", modulithModulesOrdersDomainOrderItemTableBase);
            modulithModulesOrdersDomainOrderItemTableBase.Columns.Add("version", versionColumnBase0);
            relationalModel.DefaultTables.Add("Modulith.Modules.Orders.Domain.OrderItem", modulithModulesOrdersDomainOrderItemTableBase);
            var modulithModulesOrdersDomainOrderItemMappingBase = new TableMappingBase<ColumnMappingBase>(orderItem, modulithModulesOrdersDomainOrderItemTableBase, true);
            modulithModulesOrdersDomainOrderItemTableBase.AddTypeMapping(modulithModulesOrdersDomainOrderItemMappingBase, false);
            defaultTableMappings0.Add(modulithModulesOrdersDomainOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)order_idColumnBase, orderItem.FindProperty("OrderId")!, modulithModulesOrdersDomainOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)product_idColumnBase, orderItem.FindProperty("ProductId")!, modulithModulesOrdersDomainOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)created_dateColumnBase0, orderItem.FindProperty("CreatedDate")!, modulithModulesOrdersDomainOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)priceColumnBase, orderItem.FindProperty("Price")!, modulithModulesOrdersDomainOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)quantityColumnBase, orderItem.FindProperty("Quantity")!, modulithModulesOrdersDomainOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)update_dateColumnBase0, orderItem.FindProperty("UpdateDate")!, modulithModulesOrdersDomainOrderItemMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)versionColumnBase0, orderItem.FindProperty("Version")!, modulithModulesOrdersDomainOrderItemMappingBase);

            var tableMappings0 = new List<TableMapping>();
            orderItem.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var order_itemTable = new Table("order_item", null, relationalModel);
            var order_idColumn = new Column("order_id", "uuid", order_itemTable);
            order_itemTable.Columns.Add("order_id", order_idColumn);
            var product_idColumn = new Column("product_id", "uuid", order_itemTable);
            order_itemTable.Columns.Add("product_id", product_idColumn);
            var created_dateColumn0 = new Column("created_date", "timestamp with time zone", order_itemTable);
            order_itemTable.Columns.Add("created_date", created_dateColumn0);
            var priceColumn = new Column("price", "numeric", order_itemTable);
            order_itemTable.Columns.Add("price", priceColumn);
            var quantityColumn = new Column("quantity", "integer", order_itemTable);
            order_itemTable.Columns.Add("quantity", quantityColumn);
            var update_dateColumn0 = new Column("update_date", "timestamp with time zone", order_itemTable)
            {
                IsNullable = true
            };
            order_itemTable.Columns.Add("update_date", update_dateColumn0);
            var versionColumn0 = new Column("version", "uuid", order_itemTable);
            order_itemTable.Columns.Add("version", versionColumn0);
            var pk_order_item = new UniqueConstraint("pk_order_item", order_itemTable, new[] { order_idColumn, product_idColumn });
            order_itemTable.PrimaryKey = pk_order_item;
            var pk_order_itemUc = RelationalModel.GetKey(this,
                "Modulith.Modules.Orders.Domain.OrderItem",
                new[] { "OrderId", "ProductId" });
            pk_order_item.MappedKeys.Add(pk_order_itemUc);
            RelationalModel.GetOrCreateUniqueConstraints(pk_order_itemUc).Add(pk_order_item);
            order_itemTable.UniqueConstraints.Add("pk_order_item", pk_order_item);
            relationalModel.Tables.Add(("order_item", null), order_itemTable);
            var order_itemTableMapping = new TableMapping(orderItem, order_itemTable, true);
            order_itemTable.AddTypeMapping(order_itemTableMapping, false);
            tableMappings0.Add(order_itemTableMapping);
            RelationalModel.CreateColumnMapping(order_idColumn, orderItem.FindProperty("OrderId")!, order_itemTableMapping);
            RelationalModel.CreateColumnMapping(product_idColumn, orderItem.FindProperty("ProductId")!, order_itemTableMapping);
            RelationalModel.CreateColumnMapping(created_dateColumn0, orderItem.FindProperty("CreatedDate")!, order_itemTableMapping);
            RelationalModel.CreateColumnMapping(priceColumn, orderItem.FindProperty("Price")!, order_itemTableMapping);
            RelationalModel.CreateColumnMapping(quantityColumn, orderItem.FindProperty("Quantity")!, order_itemTableMapping);
            RelationalModel.CreateColumnMapping(update_dateColumn0, orderItem.FindProperty("UpdateDate")!, order_itemTableMapping);
            RelationalModel.CreateColumnMapping(versionColumn0, orderItem.FindProperty("Version")!, order_itemTableMapping);
            var fk_order_item_order_order_id = new ForeignKeyConstraint(
                "fk_order_item_order_order_id", order_itemTable, orderTable,
                new[] { order_idColumn },
                orderTable.FindUniqueConstraint("pk_order")!, ReferentialAction.Cascade);
            var fk_order_item_order_order_idFk = RelationalModel.GetForeignKey(this,
                "Modulith.Modules.Orders.Domain.OrderItem",
                new[] { "OrderId" },
                "Modulith.Modules.Orders.Domain.Order",
                new[] { "Id" });
            fk_order_item_order_order_id.MappedForeignKeys.Add(fk_order_item_order_order_idFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fk_order_item_order_order_idFk).Add(fk_order_item_order_order_id);
            order_itemTable.ForeignKeyConstraints.Add(fk_order_item_order_order_id);
            orderTable.ReferencingForeignKeyConstraints.Add(fk_order_item_order_order_id);
            return relationalModel.MakeReadOnly();
        }
    }
}
